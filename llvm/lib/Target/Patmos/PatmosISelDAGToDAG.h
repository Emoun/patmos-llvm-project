//===-- PatmosISelDAGToDAG.h - A dag to dag inst selector for Patmos ----===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Patmos target.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_PATMOS_PATMOSISELDAGTODAG_H
#define LLVM_LIB_TARGET_PATMOS_PATMOSISELDAGTODAG_H

#include "Patmos.h"
#include "PatmosTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"

/// PatmosDAGToDAGISel - Patmos specific code to select Patmos machine
/// instructions for SelectionDAG operations.
///
namespace llvm {
  class PatmosDAGToDAGISel : public SelectionDAGISel {
    const PatmosSubtarget &Subtarget;

  public:
    PatmosDAGToDAGISel(PatmosTargetMachine &TM, CodeGenOptLevel OL)
      : SelectionDAGISel(TM, OL),
        Subtarget(*TM.getSubtargetImpl()) { }

  // Include the pieces autogenerated from the target description.
  #include "PatmosGenDAGISel.inc"

  private:
    void Select(SDNode *N) override;

    // These functions create a predicate operand from an i1 value
    bool SelectPred(SDValue N, SDValue &Reg, SDValue &Inv);
    bool SelectPredInv(SDValue N, SDValue &Reg, SDValue &Inv);
  };

  class PatmosDAGToDAGISelLegacy : public SelectionDAGISelLegacy {
  public:
    static char ID;
    explicit PatmosDAGToDAGISelLegacy(PatmosTargetMachine &TargetMachine,
                                     CodeGenOptLevel OptLevel);
  };
}
#endif

