//===-- PatmosISelDAGToDAG.cpp - A dag to dag inst selector for Patmos ----===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Patmos target.
//
//===----------------------------------------------------------------------===//

#include "PatmosISelDAGToDAG.h"
#include "Patmos.h"
#include "PatmosTargetMachine.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "patmos-isel"
#define PASS_NAME "Patmos DAG->DAG Pattern Instruction Selection"

void PatmosDAGToDAGISel::Select(SDNode *Node) {

  if (Node->isMachineOpcode())
    return;   // Already selected.

  switch (Node->getOpcode()) {
  /*
  case ISD::XOR: {
    SDNode *ResNode = SelectABSOp(Node);
    if (ResNode)
      return ResNode;
    // Other cases are autogenerated.
    break;
  }
  */
  //case ISD::BRCOND:   return SelectBRCOND(Node);
  default: break;
  }
  // autogenerated
  SelectCode(Node);

}

bool PatmosDAGToDAGISel::SelectPred(SDValue N, SDValue &Reg, SDValue &Inv) {
  SDLoc dl(N);
  if (ConstantSDNode *Imm = dyn_cast<ConstantSDNode>(N.getNode())) {
    // immediate value
    Reg = CurDAG->getRegister(Patmos::NoRegister, MVT::i1);
    Inv = CurDAG->getTargetConstant((Imm->getConstantIntValue()->isZero())?1:0, dl, MVT::i1);
  } else {
    // we have a register
    Reg = N;
    Inv = CurDAG->getTargetConstant(0, dl, MVT::i1);
  }
  return true;
}

bool PatmosDAGToDAGISel::SelectPredInv(SDValue N, SDValue &Reg, SDValue &Inv) {
  SDLoc dl(N);
  if (ConstantSDNode *Imm = dyn_cast<ConstantSDNode>(N.getNode())) {
    // immediate value
    Reg = CurDAG->getRegister(Patmos::NoRegister, MVT::i1);
    Inv = CurDAG->getTargetConstant((Imm->getConstantIntValue()->isZero())?0:1, dl, MVT::i1);
  } else {
    // we have a register
    Reg = N;
    Inv = CurDAG->getTargetConstant(1, dl, MVT::i1);
  }
  return true;
}

/// createPatmosISelDag - This pass converts a legalized DAG into a
/// Patmos-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createPatmosISelDag(PatmosTargetMachine &TM,
                                  llvm::CodeGenOptLevel OptLevel) {
  return new PatmosDAGToDAGISelLegacy(TM, OptLevel);
}

char PatmosDAGToDAGISelLegacy::ID = 0;

PatmosDAGToDAGISelLegacy::PatmosDAGToDAGISelLegacy(PatmosTargetMachine &TM,
                                                 CodeGenOptLevel OptLevel)
    : SelectionDAGISelLegacy(
          ID, std::make_unique<PatmosDAGToDAGISel>(TM, OptLevel)) {}

INITIALIZE_PASS(PatmosDAGToDAGISelLegacy, DEBUG_TYPE, PASS_NAME, false, false)
